  /**
   * Adds a new node to the tree.
   *
   * @param {string} newNodeType - The type of the new node, either "yes" or "no".
   */
  const addNewNode = (newNodeType) => {
    const updatedNodeHeight = 0;

    let {getNodeId} = selectedNode

    const newNode = {
      id: generateNodeId(),
      data: {
        getNodeId,
        setNodes,
        maxTreeHeight,
        setMaxTreeHeight,
        savedXOffset,
        setSavedXOffset,
        rootNode,
        generateNodeId,
        updateNodeContent,
        setRootNode,
        generateNode,
        nodeHeight: updatedNodeHeight,
        nodeType: newNodeType === "no" ? "no" : "yes",
        ...restData,
      },
      type: "questionInput",
      position: {
        x:
          newNodeType === "no"
            ? positionAbsoluteX - (200 + savedXOffset)
            : positionAbsoluteX + (200 + savedXOffset),
        y: positionAbsoluteY + 250,
      },
    };

    setAllNodes((nds) => nds.concat(newNode));

    const newEdge = {
      id: `edge_${id}_${newNode.id}`,
      source: id,
      target: newNode.id,
      sourceHandle: newNodeType,
      className:
        newNodeType === "no" ? "tree-flow-no-edge" : "tree-flow-yes-edge",
      type: "detailed",
    };

    setEdges((eds) => eds.concat(newEdge));
  };

  /**
   * Adds a new "no" node to the tree by calling `addNewNode` with the
   * argument `"no"`.
   */
  const onAddNoNode = () => {
    addNewNode("no");
  };

  /**
   * Adds a new "yes" node to the tree by calling `addNewNode` with the
   * argument `"yes"`.
   */
  const onAddYesNode = () => {
    addNewNode("yes");
  };

  /**
   * Handles the addition of a new node to the decision tree.
   * @param {Event} event - The event that triggered the addition of the node.
   * Updates the tree data structure and triggers a re-render.
   */
  const onAddNode = (event) => {
    let newNode = generateNode();
    let targetNodeId = id;
    let addType = event.target.getAttribute("data-node-type");
    newNode.parentId = targetNodeId;
    newNode.yPos = positionAbsoluteY + 250;

    if (addType === "yes") {
      newNode.xPos = positionAbsoluteX + (200 + savedXOffset);
      addYesChild(targetNodeId, newNode);
      // Update UI
      onAddYesNode();
    } else {
      // Update data
      newNode.xPos = positionAbsoluteX - (200 + savedXOffset);
      addNoChild(targetNodeId, newNode);
      // Update UI
      onAddNoNode();
    }
  };
